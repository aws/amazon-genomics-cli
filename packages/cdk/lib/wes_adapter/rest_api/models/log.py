# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from rest_api.models.base_model_ import Model
from rest_api import util


class Log(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name=None, cmd=None, start_time=None, end_time=None, stdout=None, stderr=None, exit_code=None):  # noqa: E501
        """Log - a model defined in OpenAPI

        :param name: The name of this Log.  # noqa: E501
        :type name: str
        :param cmd: The cmd of this Log.  # noqa: E501
        :type cmd: List[str]
        :param start_time: The start_time of this Log.  # noqa: E501
        :type start_time: str
        :param end_time: The end_time of this Log.  # noqa: E501
        :type end_time: str
        :param stdout: The stdout of this Log.  # noqa: E501
        :type stdout: str
        :param stderr: The stderr of this Log.  # noqa: E501
        :type stderr: str
        :param exit_code: The exit_code of this Log.  # noqa: E501
        :type exit_code: int
        """
        self.openapi_types = {
            'name': str,
            'cmd': List[str],
            'start_time': str,
            'end_time': str,
            'stdout': str,
            'stderr': str,
            'exit_code': int
        }

        self.attribute_map = {
            'name': 'name',
            'cmd': 'cmd',
            'start_time': 'start_time',
            'end_time': 'end_time',
            'stdout': 'stdout',
            'stderr': 'stderr',
            'exit_code': 'exit_code'
        }

        self._name = name
        self._cmd = cmd
        self._start_time = start_time
        self._end_time = end_time
        self._stdout = stdout
        self._stderr = stderr
        self._exit_code = exit_code

    @classmethod
    def from_dict(cls, dikt) -> 'Log':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Log of this Log.  # noqa: E501
        :rtype: Log
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this Log.

        The task or workflow name  # noqa: E501

        :return: The name of this Log.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Log.

        The task or workflow name  # noqa: E501

        :param name: The name of this Log.
        :type name: str
        """

        self._name = name

    @property
    def cmd(self):
        """Gets the cmd of this Log.

        The command line that was executed  # noqa: E501

        :return: The cmd of this Log.
        :rtype: List[str]
        """
        return self._cmd

    @cmd.setter
    def cmd(self, cmd):
        """Sets the cmd of this Log.

        The command line that was executed  # noqa: E501

        :param cmd: The cmd of this Log.
        :type cmd: List[str]
        """

        self._cmd = cmd

    @property
    def start_time(self):
        """Gets the start_time of this Log.

        When the command started executing, in ISO 8601 format \"%Y-%m-%dT%H:%M:%SZ\"  # noqa: E501

        :return: The start_time of this Log.
        :rtype: str
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this Log.

        When the command started executing, in ISO 8601 format \"%Y-%m-%dT%H:%M:%SZ\"  # noqa: E501

        :param start_time: The start_time of this Log.
        :type start_time: str
        """

        self._start_time = start_time

    @property
    def end_time(self):
        """Gets the end_time of this Log.

        When the command stopped executing (completed, failed, or cancelled), in ISO 8601 format \"%Y-%m-%dT%H:%M:%SZ\"  # noqa: E501

        :return: The end_time of this Log.
        :rtype: str
        """
        return self._end_time

    @end_time.setter
    def end_time(self, end_time):
        """Sets the end_time of this Log.

        When the command stopped executing (completed, failed, or cancelled), in ISO 8601 format \"%Y-%m-%dT%H:%M:%SZ\"  # noqa: E501

        :param end_time: The end_time of this Log.
        :type end_time: str
        """

        self._end_time = end_time

    @property
    def stdout(self):
        """Gets the stdout of this Log.

        A URL to retrieve standard output logs of the workflow run or task.  This URL may change between status requests, or may not be available until the task or workflow has finished execution.  Should be available using the same credentials used to access the WES endpoint.  # noqa: E501

        :return: The stdout of this Log.
        :rtype: str
        """
        return self._stdout

    @stdout.setter
    def stdout(self, stdout):
        """Sets the stdout of this Log.

        A URL to retrieve standard output logs of the workflow run or task.  This URL may change between status requests, or may not be available until the task or workflow has finished execution.  Should be available using the same credentials used to access the WES endpoint.  # noqa: E501

        :param stdout: The stdout of this Log.
        :type stdout: str
        """

        self._stdout = stdout

    @property
    def stderr(self):
        """Gets the stderr of this Log.

        A URL to retrieve standard error logs of the workflow run or task.  This URL may change between status requests, or may not be available until the task or workflow has finished execution.  Should be available using the same credentials used to access the WES endpoint.  # noqa: E501

        :return: The stderr of this Log.
        :rtype: str
        """
        return self._stderr

    @stderr.setter
    def stderr(self, stderr):
        """Sets the stderr of this Log.

        A URL to retrieve standard error logs of the workflow run or task.  This URL may change between status requests, or may not be available until the task or workflow has finished execution.  Should be available using the same credentials used to access the WES endpoint.  # noqa: E501

        :param stderr: The stderr of this Log.
        :type stderr: str
        """

        self._stderr = stderr

    @property
    def exit_code(self):
        """Gets the exit_code of this Log.

        Exit code of the program  # noqa: E501

        :return: The exit_code of this Log.
        :rtype: int
        """
        return self._exit_code

    @exit_code.setter
    def exit_code(self, exit_code):
        """Sets the exit_code of this Log.

        Exit code of the program  # noqa: E501

        :param exit_code: The exit_code of this Log.
        :type exit_code: int
        """

        self._exit_code = exit_code
