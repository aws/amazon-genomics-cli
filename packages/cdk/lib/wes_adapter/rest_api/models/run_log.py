# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from rest_api.models.base_model_ import Model
from rest_api.models.log import Log
from rest_api.models.run_request import RunRequest
from rest_api.models.state import State
from rest_api import util

from rest_api.models.log import Log  # noqa: E501
from rest_api.models.run_request import RunRequest  # noqa: E501
from rest_api.models.state import State  # noqa: E501

class RunLog(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, run_id=None, request=None, state=None, run_log=None, task_logs=None, outputs=None):  # noqa: E501
        """RunLog - a model defined in OpenAPI

        :param run_id: The run_id of this RunLog.  # noqa: E501
        :type run_id: str
        :param request: The request of this RunLog.  # noqa: E501
        :type request: RunRequest
        :param state: The state of this RunLog.  # noqa: E501
        :type state: State
        :param run_log: The run_log of this RunLog.  # noqa: E501
        :type run_log: Log
        :param task_logs: The task_logs of this RunLog.  # noqa: E501
        :type task_logs: List[Log]
        :param outputs: The outputs of this RunLog.  # noqa: E501
        :type outputs: object
        """
        self.openapi_types = {
            'run_id': str,
            'request': RunRequest,
            'state': State,
            'run_log': Log,
            'task_logs': List[Log],
            'outputs': object
        }

        self.attribute_map = {
            'run_id': 'run_id',
            'request': 'request',
            'state': 'state',
            'run_log': 'run_log',
            'task_logs': 'task_logs',
            'outputs': 'outputs'
        }

        self._run_id = run_id
        self._request = request
        self._state = state
        self._run_log = run_log
        self._task_logs = task_logs
        self._outputs = outputs

    @classmethod
    def from_dict(cls, dikt) -> 'RunLog':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The RunLog of this RunLog.  # noqa: E501
        :rtype: RunLog
        """
        return util.deserialize_model(dikt, cls)

    @property
    def run_id(self):
        """Gets the run_id of this RunLog.

        workflow run ID  # noqa: E501

        :return: The run_id of this RunLog.
        :rtype: str
        """
        return self._run_id

    @run_id.setter
    def run_id(self, run_id):
        """Sets the run_id of this RunLog.

        workflow run ID  # noqa: E501

        :param run_id: The run_id of this RunLog.
        :type run_id: str
        """

        self._run_id = run_id

    @property
    def request(self):
        """Gets the request of this RunLog.


        :return: The request of this RunLog.
        :rtype: RunRequest
        """
        return self._request

    @request.setter
    def request(self, request):
        """Sets the request of this RunLog.


        :param request: The request of this RunLog.
        :type request: RunRequest
        """

        self._request = request

    @property
    def state(self):
        """Gets the state of this RunLog.


        :return: The state of this RunLog.
        :rtype: State
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this RunLog.


        :param state: The state of this RunLog.
        :type state: State
        """

        self._state = state

    @property
    def run_log(self):
        """Gets the run_log of this RunLog.


        :return: The run_log of this RunLog.
        :rtype: Log
        """
        return self._run_log

    @run_log.setter
    def run_log(self, run_log):
        """Sets the run_log of this RunLog.


        :param run_log: The run_log of this RunLog.
        :type run_log: Log
        """

        self._run_log = run_log

    @property
    def task_logs(self):
        """Gets the task_logs of this RunLog.

        The logs, and other key info like timing and exit code, for each step in the workflow run.  # noqa: E501

        :return: The task_logs of this RunLog.
        :rtype: List[Log]
        """
        return self._task_logs

    @task_logs.setter
    def task_logs(self, task_logs):
        """Sets the task_logs of this RunLog.

        The logs, and other key info like timing and exit code, for each step in the workflow run.  # noqa: E501

        :param task_logs: The task_logs of this RunLog.
        :type task_logs: List[Log]
        """

        self._task_logs = task_logs

    @property
    def outputs(self):
        """Gets the outputs of this RunLog.

        The outputs from the workflow run.  # noqa: E501

        :return: The outputs of this RunLog.
        :rtype: object
        """
        return self._outputs

    @outputs.setter
    def outputs(self, outputs):
        """Sets the outputs of this RunLog.

        The outputs from the workflow run.  # noqa: E501

        :param outputs: The outputs of this RunLog.
        :type outputs: object
        """

        self._outputs = outputs
