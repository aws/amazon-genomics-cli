# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from rest_api.models.base_model_ import Model
from rest_api import util


class RunRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, workflow_params=None, workflow_type=None, workflow_type_version=None, tags=None, workflow_engine_parameters=None, workflow_url=None):  # noqa: E501
        """RunRequest - a model defined in OpenAPI

        :param workflow_params: The workflow_params of this RunRequest.  # noqa: E501
        :type workflow_params: object
        :param workflow_type: The workflow_type of this RunRequest.  # noqa: E501
        :type workflow_type: str
        :param workflow_type_version: The workflow_type_version of this RunRequest.  # noqa: E501
        :type workflow_type_version: str
        :param tags: The tags of this RunRequest.  # noqa: E501
        :type tags: Dict[str, str]
        :param workflow_engine_parameters: The workflow_engine_parameters of this RunRequest.  # noqa: E501
        :type workflow_engine_parameters: Dict[str, str]
        :param workflow_url: The workflow_url of this RunRequest.  # noqa: E501
        :type workflow_url: str
        """
        self.openapi_types = {
            'workflow_params': object,
            'workflow_type': str,
            'workflow_type_version': str,
            'tags': Dict[str, str],
            'workflow_engine_parameters': Dict[str, str],
            'workflow_url': str
        }

        self.attribute_map = {
            'workflow_params': 'workflow_params',
            'workflow_type': 'workflow_type',
            'workflow_type_version': 'workflow_type_version',
            'tags': 'tags',
            'workflow_engine_parameters': 'workflow_engine_parameters',
            'workflow_url': 'workflow_url'
        }

        self._workflow_params = workflow_params
        self._workflow_type = workflow_type
        self._workflow_type_version = workflow_type_version
        self._tags = tags
        self._workflow_engine_parameters = workflow_engine_parameters
        self._workflow_url = workflow_url

    @classmethod
    def from_dict(cls, dikt) -> 'RunRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The RunRequest of this RunRequest.  # noqa: E501
        :rtype: RunRequest
        """
        return util.deserialize_model(dikt, cls)

    @property
    def workflow_params(self):
        """Gets the workflow_params of this RunRequest.

        REQUIRED The workflow run parameterizations (JSON encoded), including input and output file locations  # noqa: E501

        :return: The workflow_params of this RunRequest.
        :rtype: object
        """
        return self._workflow_params

    @workflow_params.setter
    def workflow_params(self, workflow_params):
        """Sets the workflow_params of this RunRequest.

        REQUIRED The workflow run parameterizations (JSON encoded), including input and output file locations  # noqa: E501

        :param workflow_params: The workflow_params of this RunRequest.
        :type workflow_params: object
        """

        self._workflow_params = workflow_params

    @property
    def workflow_type(self):
        """Gets the workflow_type of this RunRequest.

        REQUIRED The workflow descriptor type, must be \"CWL\" or \"WDL\" currently (or another alternative supported by this WES instance)  # noqa: E501

        :return: The workflow_type of this RunRequest.
        :rtype: str
        """
        return self._workflow_type

    @workflow_type.setter
    def workflow_type(self, workflow_type):
        """Sets the workflow_type of this RunRequest.

        REQUIRED The workflow descriptor type, must be \"CWL\" or \"WDL\" currently (or another alternative supported by this WES instance)  # noqa: E501

        :param workflow_type: The workflow_type of this RunRequest.
        :type workflow_type: str
        """

        self._workflow_type = workflow_type

    @property
    def workflow_type_version(self):
        """Gets the workflow_type_version of this RunRequest.

        REQUIRED The workflow descriptor type version, must be one supported by this WES instance  # noqa: E501

        :return: The workflow_type_version of this RunRequest.
        :rtype: str
        """
        return self._workflow_type_version

    @workflow_type_version.setter
    def workflow_type_version(self, workflow_type_version):
        """Sets the workflow_type_version of this RunRequest.

        REQUIRED The workflow descriptor type version, must be one supported by this WES instance  # noqa: E501

        :param workflow_type_version: The workflow_type_version of this RunRequest.
        :type workflow_type_version: str
        """

        self._workflow_type_version = workflow_type_version

    @property
    def tags(self):
        """Gets the tags of this RunRequest.

        OPTIONAL A key-value map of arbitrary metadata outside the scope of `workflow_params` but useful to track with this run request  # noqa: E501

        :return: The tags of this RunRequest.
        :rtype: Dict[str, str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this RunRequest.

        OPTIONAL A key-value map of arbitrary metadata outside the scope of `workflow_params` but useful to track with this run request  # noqa: E501

        :param tags: The tags of this RunRequest.
        :type tags: Dict[str, str]
        """

        self._tags = tags

    @property
    def workflow_engine_parameters(self):
        """Gets the workflow_engine_parameters of this RunRequest.

        OPTIONAL Additional parameters can be sent to the workflow engine using this field. Default values for these parameters can be obtained using the ServiceInfo endpoint.  # noqa: E501

        :return: The workflow_engine_parameters of this RunRequest.
        :rtype: Dict[str, str]
        """
        return self._workflow_engine_parameters

    @workflow_engine_parameters.setter
    def workflow_engine_parameters(self, workflow_engine_parameters):
        """Sets the workflow_engine_parameters of this RunRequest.

        OPTIONAL Additional parameters can be sent to the workflow engine using this field. Default values for these parameters can be obtained using the ServiceInfo endpoint.  # noqa: E501

        :param workflow_engine_parameters: The workflow_engine_parameters of this RunRequest.
        :type workflow_engine_parameters: Dict[str, str]
        """

        self._workflow_engine_parameters = workflow_engine_parameters

    @property
    def workflow_url(self):
        """Gets the workflow_url of this RunRequest.

        REQUIRED The workflow CWL or WDL document. When `workflow_attachments` is used to attach files, the `workflow_url` may be a relative path to one of the attachments.  # noqa: E501

        :return: The workflow_url of this RunRequest.
        :rtype: str
        """
        return self._workflow_url

    @workflow_url.setter
    def workflow_url(self, workflow_url):
        """Sets the workflow_url of this RunRequest.

        REQUIRED The workflow CWL or WDL document. When `workflow_attachments` is used to attach files, the `workflow_url` may be a relative path to one of the attachments.  # noqa: E501

        :param workflow_url: The workflow_url of this RunRequest.
        :type workflow_url: str
        """

        self._workflow_url = workflow_url
