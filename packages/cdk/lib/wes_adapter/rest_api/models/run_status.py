# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from rest_api.models.base_model_ import Model
from rest_api.models.state import State
from rest_api import util

from rest_api.models.state import State  # noqa: E501

class RunStatus(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, run_id=None, state=None):  # noqa: E501
        """RunStatus - a model defined in OpenAPI

        :param run_id: The run_id of this RunStatus.  # noqa: E501
        :type run_id: str
        :param state: The state of this RunStatus.  # noqa: E501
        :type state: State
        """
        self.openapi_types = {
            'run_id': str,
            'state': State
        }

        self.attribute_map = {
            'run_id': 'run_id',
            'state': 'state'
        }

        self._run_id = run_id
        self._state = state

    @classmethod
    def from_dict(cls, dikt) -> 'RunStatus':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The RunStatus of this RunStatus.  # noqa: E501
        :rtype: RunStatus
        """
        return util.deserialize_model(dikt, cls)

    @property
    def run_id(self):
        """Gets the run_id of this RunStatus.


        :return: The run_id of this RunStatus.
        :rtype: str
        """
        return self._run_id

    @run_id.setter
    def run_id(self, run_id):
        """Sets the run_id of this RunStatus.


        :param run_id: The run_id of this RunStatus.
        :type run_id: str
        """
        if run_id is None:
            raise ValueError("Invalid value for `run_id`, must not be `None`")  # noqa: E501

        self._run_id = run_id

    @property
    def state(self):
        """Gets the state of this RunStatus.


        :return: The state of this RunStatus.
        :rtype: State
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this RunStatus.


        :param state: The state of this RunStatus.
        :type state: State
        """

        self._state = state
