import { PolicyOptions } from "../types/engine-options";
import { BucketOperations } from "../common/BucketOperations";
import { Construct } from "constructs";
import { Arn, Aws, Stack } from "aws-cdk-lib";
import { Role, ServicePrincipal, PolicyDocument, PolicyStatement, Effect } from "aws-cdk-lib/aws-iam";

export interface ToilJobRoleProps {
  readOnlyBucketArns: string[];
  readWriteBucketArns: string[];
  policies: PolicyOptions;
}

// This role grants access to everything a Toil job needs to talk to the AWS
// job store and/or additional user data in S3.
export class ToilJobRole extends Role {
  constructor(scope: Construct, id: string, props: ToilJobRoleProps, additionalInlinePolicies?: { [key: string]: PolicyDocument }) {
    // Toil workflows make S3 buckets and SimpleDB domains for scratch.
    // In SimpleDB we use the "toil-registry" domain, and also domains for job
    // stores generated by toil.jobStores.util.generate_locator, which also
    // start with "toil-".
    // We will no longer need this when
    // https://github.com/DataBiosphere/toil/issues/964 is fixed and Toil stops
    // using SimpleDB.
    const jobStoreSimpleDbArnPattern = Arn.format(
      {
        account: Aws.ACCOUNT_ID,
        region: Aws.REGION,
        partition: Aws.PARTITION,
        resource: "domain/toil-*",
        service: "sdb",
      },
      scope as Stack
    );
    // In S3 we use buckets for job stores generated by
    // toil.jobStores.util.generate_locator, which start with "toil-".
    // We will no longer need this when
    // https://github.com/DataBiosphere/toil/issues/3983 is fixed and Toil
    // becomes able to just use the one AGC-provided bucket.
    const jobStoreS3ArnPattern = Arn.format(
      {
        // Note that regions and account IDs aren't allowed in S3 ARNs.
        // But the formatter requires them to be passed, and wants an empty
        // string if we don't actually want them filled in.
        account: "",
        region: "",
        partition: Aws.PARTITION,
        resource: "toil-*",
        service: "s3",
      },
      scope as Stack
    );

    super(scope, id, {
      assumedBy: new ServicePrincipal("ecs-tasks.amazonaws.com"),
      inlinePolicies: {
        ToilSimpleDbJobStoreAccess: new PolicyDocument({
          assignSids: true,
          statements: [
            new PolicyStatement({
              effect: Effect.ALLOW,
              // These are the SimpleDB IAM actions associated with the
              // SimpleDB operations that the Toil AWS job store calls. They
              // are most likely all used, but leaving each out has not been
              // tested.
              actions: [
                "sdb:CreateDomain",
                "sdb:DeleteDomain",
                "sdb:GetAttributes",
                "sdb:PutAttributes",
                "sdb:BatchPutAttributes",
                "sdb:DeleteAttributes",
                "sdb:BatchDeleteAttributes",
                "sdb:Select",
              ],
              resources: [jobStoreSimpleDbArnPattern],
            }),
          ],
        }),
        ToilS3JobStoreAccess: new PolicyDocument({
          assignSids: true,
          statements: [
            new PolicyStatement({
              effect: Effect.ALLOW,
              // These are the IAM actions which seem relevant to the Boto3
              // client and resource operations that the Toil AWS job store
              // does on its job store bucket.
              // It is possible some are not actually used, especially some of
              // the get/list operations which may or may not actually be
              // required to construct the associated Boto3 Resource objects.
              // Leaving each out has not been tested.
              actions: [
                "s3:CreateBucket",
                "s3:DeleteBucket",
                "s3:GetBucketTagging",
                "s3:PutBucketTagging",
                "s3:GetBucketVersioning",
                "s3:PutBucketVersioning",
                "s3:HeadBucket",
                "s3:GetBucketLocation",
                "s3:HeadObject",
                "s3:GetObject",
                "s3:GetObjectVersion",
                "s3:PutObject",
                "s3:ListBucket",
                "s3:ListBucketVersions",
                "s3:ListObjects",
                "s3:DeleteObject",
                "s3:DeleteObjectVersion",
                "s3:GetObjectAcl",
                "s3:PutObjectAcl",
                "s3:ListBucketMultipartUploads",
                "s3:ListMultipartUploadParts",
                "s3:AbortMultipartUpload",
              ],
              resources: [jobStoreS3ArnPattern],
            }),
          ],
        }),
        ...additionalInlinePolicies,
      },
      ...props.policies,
    });

    BucketOperations.grantBucketAccess(this, this, props.readOnlyBucketArns, true);
    BucketOperations.grantBucketAccess(this, this, props.readWriteBucketArns);
  }
}
