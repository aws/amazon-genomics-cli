// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/pkg/version/interfaces.go

// Package version is a generated GoMock package.
package version

import (
	context "context"
	reflect "reflect"
	time "time"

	s3 "github.com/aws/aws-sdk-go-v2/service/s3"
	gomock "github.com/golang/mock/gomock"
)

// MockS3Api is a mock of S3Api interface.
type MockS3Api struct {
	ctrl     *gomock.Controller
	recorder *MockS3ApiMockRecorder
}

// MockS3ApiMockRecorder is the mock recorder for MockS3Api.
type MockS3ApiMockRecorder struct {
	mock *MockS3Api
}

// NewMockS3Api creates a new mock instance.
func NewMockS3Api(ctrl *gomock.Controller) *MockS3Api {
	mock := &MockS3Api{ctrl: ctrl}
	mock.recorder = &MockS3ApiMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockS3Api) EXPECT() *MockS3ApiMockRecorder {
	return m.recorder
}

// GetObject mocks base method.
func (m *MockS3Api) GetObject(ctx context.Context, params *s3.GetObjectInput, optFns ...func(*s3.Options)) (*s3.GetObjectOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetObject", varargs...)
	ret0, _ := ret[0].(*s3.GetObjectOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetObject indicates an expected call of GetObject.
func (mr *MockS3ApiMockRecorder) GetObject(ctx, params interface{}, optFns ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetObject", reflect.TypeOf((*MockS3Api)(nil).GetObject), varargs...)
}

// ListObjectsV2 mocks base method.
func (m *MockS3Api) ListObjectsV2(arg0 context.Context, arg1 *s3.ListObjectsV2Input, arg2 ...func(*s3.Options)) (*s3.ListObjectsV2Output, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListObjectsV2", varargs...)
	ret0, _ := ret[0].(*s3.ListObjectsV2Output)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListObjectsV2 indicates an expected call of ListObjectsV2.
func (mr *MockS3ApiMockRecorder) ListObjectsV2(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListObjectsV2", reflect.TypeOf((*MockS3Api)(nil).ListObjectsV2), varargs...)
}

// MockStore is a mock of Store interface.
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
}

// MockStoreMockRecorder is the mock recorder for MockStore.
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance.
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// ReadVersions mocks base method.
func (m *MockStore) ReadVersions(version string, currentTime time.Time) ([]Info, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadVersions", version, currentTime)
	ret0, _ := ret[0].([]Info)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadVersions indicates an expected call of ReadVersions.
func (mr *MockStoreMockRecorder) ReadVersions(version, currentTime interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadVersions", reflect.TypeOf((*MockStore)(nil).ReadVersions), version, currentTime)
}
