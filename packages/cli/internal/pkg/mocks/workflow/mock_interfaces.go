// Code generated by MockGen. DO NOT EDIT.
// Source: ./interfaces.go

// Package mock_workflow is a generated GoMock package.
package workflowmocks

import (
	reflect "reflect"

	workflow "github.com/aws/amazon-genomics-cli/internal/pkg/cli/workflow"
	gomock "github.com/golang/mock/gomock"
)

// MockWorkflowManager is a mock of WorkflowManager interface.
type MockWorkflowManager struct {
	ctrl     *gomock.Controller
	recorder *MockWorkflowManagerMockRecorder
}

// MockWorkflowManagerMockRecorder is the mock recorder for MockWorkflowManager.
type MockWorkflowManagerMockRecorder struct {
	mock *MockWorkflowManager
}

// NewMockWorkflowManager creates a new mock instance.
func NewMockWorkflowManager(ctrl *gomock.Controller) *MockWorkflowManager {
	mock := &MockWorkflowManager{ctrl: ctrl}
	mock.recorder = &MockWorkflowManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWorkflowManager) EXPECT() *MockWorkflowManagerMockRecorder {
	return m.recorder
}

// GetWorkflowTasks mocks base method.
func (m *MockWorkflowManager) GetWorkflowTasks(runId string) ([]workflow.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWorkflowTasks", runId)
	ret0, _ := ret[0].([]workflow.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWorkflowTasks indicates an expected call of GetWorkflowTasks.
func (mr *MockWorkflowManagerMockRecorder) GetWorkflowTasks(runId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWorkflowTasks", reflect.TypeOf((*MockWorkflowManager)(nil).GetWorkflowTasks), runId)
}

// ListWorkflows mocks base method.
func (m *MockWorkflowManager) ListWorkflows() (map[string]workflow.Summary, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListWorkflows")
	ret0, _ := ret[0].(map[string]workflow.Summary)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListWorkflows indicates an expected call of ListWorkflows.
func (mr *MockWorkflowManagerMockRecorder) ListWorkflows() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListWorkflows", reflect.TypeOf((*MockWorkflowManager)(nil).ListWorkflows))
}

// RunWorkflow mocks base method.
func (m *MockWorkflowManager) RunWorkflow(contextName, workflowName, argumentsUrl string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RunWorkflow", contextName, workflowName, argumentsUrl)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RunWorkflow indicates an expected call of RunWorkflow.
func (mr *MockWorkflowManagerMockRecorder) RunWorkflow(contextName, workflowName, argumentsUrl interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunWorkflow", reflect.TypeOf((*MockWorkflowManager)(nil).RunWorkflow), contextName, workflowName, argumentsUrl)
}

// StatusWorkflowAll mocks base method.
func (m *MockWorkflowManager) StatusWorkflowAll(numInstances int) ([]workflow.InstanceSummary, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StatusWorkflowAll", numInstances)
	ret0, _ := ret[0].([]workflow.InstanceSummary)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StatusWorkflowAll indicates an expected call of StatusWorkflowAll.
func (mr *MockWorkflowManagerMockRecorder) StatusWorkflowAll(numInstances interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StatusWorkflowAll", reflect.TypeOf((*MockWorkflowManager)(nil).StatusWorkflowAll), numInstances)
}

// StatusWorkflowByContext mocks base method.
func (m *MockWorkflowManager) StatusWorkflowByContext(contextName string, numInstances int) ([]workflow.InstanceSummary, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StatusWorkflowByContext", contextName, numInstances)
	ret0, _ := ret[0].([]workflow.InstanceSummary)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StatusWorkflowByContext indicates an expected call of StatusWorkflowByContext.
func (mr *MockWorkflowManagerMockRecorder) StatusWorkflowByContext(contextName, numInstances interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StatusWorkflowByContext", reflect.TypeOf((*MockWorkflowManager)(nil).StatusWorkflowByContext), contextName, numInstances)
}

// StatusWorkflowByInstanceId mocks base method.
func (m *MockWorkflowManager) StatusWorkflowByInstanceId(instanceId string) ([]workflow.InstanceSummary, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StatusWorkflowByInstanceId", instanceId)
	ret0, _ := ret[0].([]workflow.InstanceSummary)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StatusWorkflowByInstanceId indicates an expected call of StatusWorkflowByInstanceId.
func (mr *MockWorkflowManagerMockRecorder) StatusWorkflowByInstanceId(instanceId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StatusWorkflowByInstanceId", reflect.TypeOf((*MockWorkflowManager)(nil).StatusWorkflowByInstanceId), instanceId)
}

// StatusWorkflowByName mocks base method.
func (m *MockWorkflowManager) StatusWorkflowByName(workflowName string, numInstances int) ([]workflow.InstanceSummary, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StatusWorkflowByName", workflowName, numInstances)
	ret0, _ := ret[0].([]workflow.InstanceSummary)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StatusWorkflowByName indicates an expected call of StatusWorkflowByName.
func (mr *MockWorkflowManagerMockRecorder) StatusWorkflowByName(workflowName, numInstances interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StatusWorkflowByName", reflect.TypeOf((*MockWorkflowManager)(nil).StatusWorkflowByName), workflowName, numInstances)
}

// StopWorkflowInstance mocks base method.
func (m *MockWorkflowManager) StopWorkflowInstance(runId string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "StopWorkflowInstance", runId)
}

// StopWorkflowInstance indicates an expected call of StopWorkflowInstance.
func (mr *MockWorkflowManagerMockRecorder) StopWorkflowInstance(runId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopWorkflowInstance", reflect.TypeOf((*MockWorkflowManager)(nil).StopWorkflowInstance), runId)
}
