// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/pkg/mocks/context/interfaces.go

// Package contextmocks is a generated GoMock package.
package contextmocks

import (
	reflect "reflect"
	context "github.com/aws/amazon-genomics-cli/internal/pkg/cli/context"
	gomock "github.com/golang/mock/gomock"
)

// MockContextManager is a mock of ContextManager interface.
type MockContextManager struct {
	ctrl     *gomock.Controller
	recorder *MockContextManagerMockRecorder
}

// MockContextManagerMockRecorder is the mock recorder for MockContextManager.
type MockContextManagerMockRecorder struct {
	mock *MockContextManager
}

// NewMockContextManager creates a new mock instance.
func NewMockContextManager(ctrl *gomock.Controller) *MockContextManager {
	mock := &MockContextManager{ctrl: ctrl}
	mock.recorder = &MockContextManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockContextManager) EXPECT() *MockContextManagerMockRecorder {
	return m.recorder
}

// Deploy mocks base method.
func (m *MockContextManager) Deploy(contexts []string) []context.ProgressResult {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Deploy", contexts)
	ret0, _ := ret[0].([]context.ProgressResult)
	return ret0
}

// Deploy indicates an expected call of Deploy.
func (mr *MockContextManagerMockRecorder) Deploy(contexts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Deploy", reflect.TypeOf((*MockContextManager)(nil).Deploy), contexts)
}

// Destroy mocks base method.
func (m *MockContextManager) Destroy(contexts []string) []context.ProgressResult {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Destroy", contexts)
	ret0, _ := ret[0].([]context.ProgressResult)
	return ret0
}

// Destroy indicates an expected call of Destroy.
func (mr *MockContextManagerMockRecorder) Destroy(contexts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Destroy", reflect.TypeOf((*MockContextManager)(nil).Destroy), contexts)
}

// Info mocks base method.
func (m *MockContextManager) Info(contextName string) (context.Detail, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Info", contextName)
	ret0, _ := ret[0].(context.Detail)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Info indicates an expected call of Info.
func (mr *MockContextManagerMockRecorder) Info(contextName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Info", reflect.TypeOf((*MockContextManager)(nil).Info), contextName)
}

// List mocks base method.
func (m *MockContextManager) List() (map[string]context.Summary, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List")
	ret0, _ := ret[0].(map[string]context.Summary)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockContextManagerMockRecorder) List() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockContextManager)(nil).List))
}

// StatusList mocks base method.
func (m *MockContextManager) StatusList() ([]context.Instance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StatusList")
	ret0, _ := ret[0].([]context.Instance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StatusList indicates an expected call of StatusList.
func (mr *MockContextManagerMockRecorder) StatusList() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StatusList", reflect.TypeOf((*MockContextManager)(nil).StatusList))
}
